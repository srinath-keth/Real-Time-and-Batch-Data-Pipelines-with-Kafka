networks:
  kafka_network:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.0.0
    restart: unless-stopped
    ports:
      - "${ZOOKEEPER_CLIENT_PORT}:${ZOOKEEPER_CLIENT_PORT}"
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
      ZOOKEEPER_SYNC_LIMIT: ${ZOOKEEPER_SYNC_LIMIT}
    networks:
      - kafka_network

  kafka:
    container_name: kafka
    hostname: kafka
    image: confluentinc/cp-kafka:5.0.0
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_LISTENERS: ${KAFKA_LISTENERS}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "${KAFKA_AUTO_CREATE_TOPICS_ENABLE}"
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME}
    depends_on:
      - zookeeper
    networks:
      - kafka_network

  producer:
    container_name: producer
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - kafka
    environment:
      BOOTSTRAP_SERVERS: ${BOOTSTRAP_SERVERS}
    command: sh -c "sleep 10 && python producer/producer.py"
    networks:
      - kafka_network

  consumer:
    container_name: consumer
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - kafka
    environment:
      BOOTSTRAP_SERVERS: ${BOOTSTRAP_SERVERS}
    command: sh -c "sleep 15 && python consumer/consumer.py"
    networks:
      - kafka_network

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    networks:
      - kafka_network
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro

  etl:
    container_name: etl
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - postgres
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
    command: sh -c "sleep 300 && python etl/etl.py"
    networks:
      - kafka_network

volumes:
  postgres_data:
    driver: local
